}
# for logistic PS only!
predPsm <- function(x){
x <- as.data.frame(x)
names(x) <- c('x1', 'x2', 'x3', 'x4', 'x5', 'x6', 'x7', 'x8', 'x9', 'x10')
ps <- predict(psm1, x, type="response")
ps1 <- round(ps)
return(ps1)
}
predPS <- function(x){
x <- as.data.frame(x)
names(x) <- c('x1', 'x2', 'x3', 'x4', 'x5', 'x6', 'x7', 'x8', 'x9', 'x10')
ps <- predict(psm1, x, type="response")
return(ps)
}
# For prognostic propensity scores
predPS2 <- function(x){
x <- as.data.frame(x)
names(x) <- c('x1', 'x2', 'x3', 'x4', 'x5', 'x6', 'x7', 'x8', 'x9', 'x10', 'pg')
ps <- predict(psm2, x, type="response")
return(ps)
}
index <- sample(nrow(dftest1), 1)
obs <- dftest1[index,]
propensityIndex=c(0:6)
propensityIndex2=c(0:6, 10)
outcomeIndex=c(0:3, 7:9)
observation=matrix(obs)
X=X_test
y=y_test
treat=trt_test
propensityIndex=matrix(propensityIndex, nrow=1, ncol=length(propensityIndex))
propensityIndex2=matrix(propensityIndex2, nrow=1, ncol=length(propensityIndex2))
propensityIndex
outcomeIndex=matrix(outcomeIndex, nrow=1, ncol=length(outcomeIndex))
outcomeIndex
outcomeTrt=predTrt
outcomeCtrl=predCtrl
idx=as.integer(index)
score_function=predPS
numCores <- detectCores()
indices <- sample(seq(nrow(dftest1)), 25)
indices[1]
dftest1[indices[1]+1,]
predPS(as.matrix(dftest1[indices[1]+1,2:11], ncol=10, nrow=1))
adv <- list()
advEnn <- list()
og <- list()
sysTime <- list()
# system.time({
# for (i in 1:25) {
#   sysTime[[i]] <- system.time({
#     adv[[i]] <- py$gsAll(indices[i])
#   })
#   og[[i]] <- dftest1[indices[i]+1, ]
#   print(i)
#   print(sysTime[[i]])
# }})
library(pbmcapply)
system.time(
results <- pbmclapply(c(indices[1:25]), py$gsAll, mc.cores = 8)
)
og = list()
for (i in 1:length(indices)){
og[[i]] <- dftest1[indices[i]+1, ]
}
pbFnc <- function(gsAll, dftest1) {
library(pbmcapply)
results <- pbmclapply(c(indices[1:25]), gsAll, mc.cores = 8)
return(results)
}
ogFnc <- function(dftest, indices) {
og = list()
for (i in 1:length(indices)){
og[[i]] <- dftest[indices[i]+1, ]
}
return(og)
}
resultsList <- list()
ogList <- list()
resultsList[[1]] <- results1 <- pbFnc(py$gsAll, dftest1)
og1 <- ogList[[1]] <- ogFnc(dftest1, indices)
resultsList[[2]] <- results2 <- pbFnc(py$gsAll2, dftest2)
og2 <- ogList[[2]] <- ogFnc(dftest2, indices)
# resultsList[[3]] <- resultsCat <- pbFnc(py$gsAll3, dftestCat)
# ogCat <- ogList[[3]] <- ogFnc(dftestCat, indices)
#
# resultsList[[4]] <- resultsCat2 <- pbFnc(py$gsAll4, dftestCat2)
# ogCat2 <- ogList[[4]] <- ogFnc(dftestCat2, indices)
minDist <- function(adv, og) {
advs2 <- list()
for (i in 1:length(adv)) {
if (length(adv[[i]][[1]]) > 1) {
z <- llply(adv[[i]][[1]], function(x) {
dist(rbind(x[-11], og[[i]][2:11]))
})
j <- which(as.vector(z, mode="numeric") == min(as.vector(z, mode="numeric")))
advs2[[i]] <- adv[[i]][[1]][j] }
else {advs2[[i]] <- adv[[i]]}
}
return(advs2)
}
results2 <- list()
for (i in length(resultsList)) {
results2[[i]] <- minDist(resultsList[i], ogList[i])
}
outcomeTrt <- function(x){
x <- as.data.frame(as.matrix(x, ncol=10, nrow=1))
names(x) <- c('x1', 'x2', 'x3', 'x4', 'x5', 'x6', 'x7', 'x8', 'x9', 'x10')
out <- predict(rfTrt, x)
return(out)}
outcomeCtrl <- function(x){
x <- as.data.frame(as.matrix(x, ncol=10, nrow=1))
names(x) <- c('x1', 'x2', 'x3', 'x4', 'x5', 'x6', 'x7', 'x8', 'x9', 'x10')
out <- predict(rfCtrl, x)
return(out)}
for (i in length(results2)) {
adv <- results2[[i]]
og <- ogList[[i]]
metricsList <- list()
advPS <- llply(adv, function(x) {
predPS(matrix(unlist(x[[1]])[1:length(x)], ncol=length(x), nrow=1))
})
advTrtOutcome <- llply(adv, function(x) {
outcomeTrt(matrix(unlist(x[[1]])[1:length(x)], ncol=length(x), nrow=1))
})
ogTrtOutcome <- llply(og, function(x) {
outcomeTrt(matrix(unlist(x)[1:length(x)], ncol=length(x), nrow=1))
})
advCtrlOutcome <- llply(adv, function(x) {
outcomeCtrl(matrix(unlist(x[[1]])[1:length(x)], ncol=length(x), nrow=1))
})
ogCtrlOutcome <- llply(og, function(x) {
outcomeCtrl(matrix(unlist(x)[1:length(x)], ncol=length(x), nrow=1))
})
ogOutcome <- llply(og, function(x) {
x[1] })
}
knitr::opts_chunk$set(echo = TRUE)
setwd("~/Repositories/thesis")
library(reticulate)
source_python("GSfunction.py")
source("DataGeneration.R")
source("Performance.R")
library(mvtnorm)
library(BBmisc)
library(MatchIt)
library(randomForest)
library(cem)
library(readr)
library(plyr)
library(dplyr)
library(Hmisc)
library(pROC)
library(parallel)
library(caret)
library(readr)
library(dplyr)
library(Hmisc)
library(MatchIt)
library(cem)
path_to_python <- "/usr/local/bin/python3"
use_python(path_to_python)
dframes <- list()
# No dichotomized
dframes[[1]] <- df1 <- as.data.frame(sims(sigma, n=10000, dichotomize = NULL))
write.csv(df1, "sim0.csv")
#prop.table(table(df1$trtRound))
prop.table(table(df1$trt1))
# Two categoircal
set.seed(67)
dframes[[2]] <- df2 <- as.data.frame(sims(sigma, dichotomize = c(1,3)))
write.csv(df2, "sim2.csv")
dframes[[3]] <- df3 <- as.data.frame(sims(sigma, n=10000, dichotomize = NULL, outcomeMethod = "nonadditivity"))
dframes[[4]] <- df4 <- as.data.frame(sims(sigma, n=10000, dichotomize = NULL, outcomeMethod = "nonlinearity"))
dframes[[5]] <- df5 <- as.data.frame(sims(sigma, n=10000, dichotomize = NULL, outcomeMethod = "nonaddlin"))
### Normalize function
normalz <- function(df) {
newX <- normalize(df[,2:11], method = "range", range = c(0, 1), margin = 2, on.constant = "quiet")
df1 <- as.data.frame(cbind(df[,1], newX, df[,12]))
names(df1) <- c("y1", "x1", "x2", "x3", "x4", "x5", "x6", "x7", "x8", "x9", "x10", "trt1")
return(df1)
}
### Train/test split
trainTest <- function(df) {
split <- list()
nx <- sample(nrow(df), nrow(df)/3)
dftrain1 <- df[-nx,]
dftrain1 <- as.data.frame(dftrain1)
dftest1 <- df[nx,]
row.names(dftest1) <- as.numeric(c(1:nrow(dftest1)))
split[[1]] <- dftrain1
split[[2]] <- dftest1
return(split)
}
## PS model
# Random Forest
# propensityIndex <- c(2:8) # because column 1 = y1
# psm1 <- randomForest(x= as.matrix(dftrain1[,propensityIndex]), y=as.factor(dftrain1$trt1))
# psmPred <- predict(psm1, as.matrix(dftest1[,propensityIndex]))
# roc(dftest1$trt1, as.numeric(psmPred))
mods <- function(dftrain1, dftest1, formula = y1 ~ x1 + x2 + x3 + x4 + x8 + x9 + x10, prognostic=FALSE) {
library(randomForest)
library(pROC)
list1 <- list()
dftrainTrt1 <- dftrain1[dftrain1$trt1==1,]
dftrainCtrl1 <- dftrain1[dftrain1$trt1==0,]
dftestTrt1 <- dftest1[dftest1$trt1==1,]
dftestCtrl1 <- dftest1[dftest1$trt1==0,]
list1[[8]] <- rfTrt <- randomForest(formula, data=dftrainTrt1)
list1[[9]] <- rfTrtPred <- predict(rfTrt, dftestTrt1)
cor(rfTrtPred, dftestTrt1$y1)^2
# control
list1[[10]] <- rfCtrl <- randomForest(formula, data=dftrainCtrl1)
list1[[11]] <- rfCtrlPred <- predict(rfCtrl, dftestCtrl1) # prognostic score model
cor(rfCtrlPred, dftestCtrl1$y1)^2
if (prognostic==TRUE) {
dftrain1$pg <- predict(rfCtrl, dftrain1)
dftest1$pg <- predict(rfCtrl, dftest1)
list1[[12]] <- dftrain1
list1[[13]] <- dftest1
list1[[1]] <- X_train <- as.data.frame(dftrain1[,c(2:11, 13)])
list1[[2]] <- y_train <- dftrain1[,1]
list1[[3]] <- trt_train <- dftrain1[,12]
list1[[4]] <- X_test <- dftest1[,c(2:11, 13)]
list1[[5]] <- y_test <- dftest1[,1]
list1[[6]] <- trt_test <- dftest1[,12]
list1[[7]] <- psm1 <- glm(factor(trt1) ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + pg, data=dftrain1, family=binomial)
logitPred2 <- predict(psm1, dftest1, type="response")
roc(response = dftest1$trt1, predictor = logitPred2)
} else {
list1[[1]] <- X_train <- as.data.frame(dftrain1[,2:11])
list1[[2]] <- y_train <- dftrain1[,1]
list1[[3]] <- trt_train <- dftrain1[,12]
list1[[4]] <- X_test <- dftest1[,2:11]
list1[[5]] <- y_test <- dftest1[,1]
list1[[6]] <- trt_test <- dftest1[,12]
list1[[7]] <- psm1 <- glm(factor(trt1) ~ x1 + x2 + x3 + x4 + x5 + x6 + x7, data=dftrain1, family=binomial)
logitPred <- predict(psm1, dftest1, type="response")
roc(response = dftest1$trt1, predictor = logitPred)
}
return(list1)
}
### Model outcome predict treated
outcomeTrt <- function(x){
x <- matrix(x, ncol=10, nrow=1)
x <- as.data.frame(x)
names(x) <- c('x1', 'x2', 'x3', 'x4', 'x5', 'x6', 'x7', 'x8', 'x9', 'x10')
out <- predict(rfTrt, x)
return(out)
}
### Model outcome predict control
outcomeCtrl <- function(x){
x <- matrix(x, ncol=10, nrow=1)
x <- as.data.frame(x)
names(x) <- c('x1', 'x2', 'x3', 'x4', 'x5', 'x6', 'x7', 'x8', 'x9', 'x10')
out <- predict(rfCtrl, x)
return(out)
}
for (i in 1:length(dframes)) {
newX <- normalz(df=dframes[[i]])
sp1 <- trainTest(newX)
dftrain <- sp1[[1]]
dftest <- sp1[[2]]
assign(paste("newX", i, sep=""), newX)
assign(paste("dftrain", i, sep=""), dftrain)
assign(paste("dftest", i, sep=""), dftrain)
}
dftrainCat <- dftrain3
dftestCat <- dftest3
dftrainCat2 <- dftrain4
dftestCat2 <- dftest4
library(zeallot)
c(X_train, y_train, trt_train, X_test, y_test, trt_test, psm1, rfTrt, rfTrtPred, rfCtrl, rfCtrlPred) %<-% mods(dftrain1, dftest1, prognostic=FALSE)
c(X_train2, y_train2, trt_train2, X_test2, y_test2, trt_test2, psm2, rfTrt2, rfTrtPred2, rfCtrl2, rfCtrlPred2, dftrain2, dftest2) %<-% mods(dftrain2, dftest2, prognostic=TRUE)
c(X_trainCat, y_trainCat, trt_trainCat, X_testCat, y_testCat, trt_testCat, psmCat, rfTrtCat, rfTrtPredCat, rfCtrlCat, rfCtrlPredCat) %<-% mods(dftrainCat, dftestCat, prognostic=FALSE)
c(X_trainCat2, y_trainCat2, trt_trainCat2, X_testCat2, y_testCat2, trt_testCat2, psmCat2, rfTrtCat2, rfTrtPredCat2, rfCtrlCat2, rfCtrlPredCat2, dftrainCat2, dftestCat2) %<-% mods(dftrainCat, dftestCat, prognostic=TRUE)
##
knitr::opts_chunk$set(echo = TRUE)
setwd("~/Repositories/thesis")
library(reticulate)
source_python("GSfunction.py")
source("DataGeneration.R")
source("Performance.R")
library(mvtnorm)
library(BBmisc)
library(MatchIt)
library(randomForest)
library(cem)
library(readr)
library(plyr)
library(dplyr)
library(Hmisc)
library(pROC)
library(parallel)
library(caret)
library(readr)
library(dplyr)
library(Hmisc)
library(MatchIt)
library(cem)
path_to_python <- "/usr/local/bin/python3"
use_python(path_to_python)
dframes <- list()
# No dichotomized
dframes[[1]] <- df1 <- as.data.frame(sims(sigma, n=10000, dichotomize = NULL))
write.csv(df1, "sim0.csv")
#prop.table(table(df1$trtRound))
prop.table(table(df1$trt1))
# Two categoircal
set.seed(67)
dframes[[2]] <- df2 <- as.data.frame(sims(sigma, dichotomize = c(1,3)))
write.csv(df2, "sim2.csv")
dframes[[3]] <- df3 <- as.data.frame(sims(sigma, n=10000, dichotomize = NULL, outcomeMethod = "nonadditivity"))
dframes[[4]] <- df4 <- as.data.frame(sims(sigma, n=10000, dichotomize = NULL, outcomeMethod = "nonlinearity"))
dframes[[5]] <- df5 <- as.data.frame(sims(sigma, n=10000, dichotomize = NULL, outcomeMethod = "nonaddlin"))
### Normalize function
normalz <- function(df) {
newX <- normalize(df[,2:11], method = "range", range = c(0, 1), margin = 2, on.constant = "quiet")
df1 <- as.data.frame(cbind(df[,1], newX, df[,12]))
names(df1) <- c("y1", "x1", "x2", "x3", "x4", "x5", "x6", "x7", "x8", "x9", "x10", "trt1")
return(df1)
}
### Train/test split
trainTest <- function(df) {
split <- list()
nx <- sample(nrow(df), nrow(df)/3)
dftrain1 <- df[-nx,]
dftrain1 <- as.data.frame(dftrain1)
dftest1 <- df[nx,]
row.names(dftest1) <- as.numeric(c(1:nrow(dftest1)))
split[[1]] <- dftrain1
split[[2]] <- dftest1
return(split)
}
## PS model
# Random Forest
# propensityIndex <- c(2:8) # because column 1 = y1
# psm1 <- randomForest(x= as.matrix(dftrain1[,propensityIndex]), y=as.factor(dftrain1$trt1))
# psmPred <- predict(psm1, as.matrix(dftest1[,propensityIndex]))
# roc(dftest1$trt1, as.numeric(psmPred))
mods <- function(dftrain1, dftest1, formula = y1 ~ x1 + x2 + x3 + x4 + x8 + x9 + x10, prognostic=FALSE) {
library(randomForest)
library(pROC)
list1 <- list()
dftrainTrt1 <- dftrain1[dftrain1$trt1==1,]
dftrainCtrl1 <- dftrain1[dftrain1$trt1==0,]
dftestTrt1 <- dftest1[dftest1$trt1==1,]
dftestCtrl1 <- dftest1[dftest1$trt1==0,]
list1[[8]] <- rfTrt <- randomForest(formula, data=dftrainTrt1)
list1[[9]] <- rfTrtPred <- predict(rfTrt, dftestTrt1)
cor(rfTrtPred, dftestTrt1$y1)^2
# control
list1[[10]] <- rfCtrl <- randomForest(formula, data=dftrainCtrl1)
list1[[11]] <- rfCtrlPred <- predict(rfCtrl, dftestCtrl1) # prognostic score model
cor(rfCtrlPred, dftestCtrl1$y1)^2
if (prognostic==TRUE) {
dftrain1$pg <- predict(rfCtrl, dftrain1)
dftest1$pg <- predict(rfCtrl, dftest1)
list1[[12]] <- dftrain1
list1[[13]] <- dftest1
list1[[1]] <- X_train <- as.data.frame(dftrain1[,c(2:11, 13)])
list1[[2]] <- y_train <- dftrain1[,1]
list1[[3]] <- trt_train <- dftrain1[,12]
list1[[4]] <- X_test <- dftest1[,c(2:11, 13)]
list1[[5]] <- y_test <- dftest1[,1]
list1[[6]] <- trt_test <- dftest1[,12]
list1[[7]] <- psm1 <- glm(factor(trt1) ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + pg, data=dftrain1, family=binomial)
logitPred2 <- predict(psm1, dftest1, type="response")
roc(response = dftest1$trt1, predictor = logitPred2)
} else {
list1[[1]] <- X_train <- as.data.frame(dftrain1[,2:11])
list1[[2]] <- y_train <- dftrain1[,1]
list1[[3]] <- trt_train <- dftrain1[,12]
list1[[4]] <- X_test <- dftest1[,2:11]
list1[[5]] <- y_test <- dftest1[,1]
list1[[6]] <- trt_test <- dftest1[,12]
list1[[7]] <- psm1 <- glm(factor(trt1) ~ x1 + x2 + x3 + x4 + x5 + x6 + x7, data=dftrain1, family=binomial)
logitPred <- predict(psm1, dftest1, type="response")
roc(response = dftest1$trt1, predictor = logitPred)
}
return(list1)
}
### Model outcome predict treated
outcomeTrt <- function(x){
x <- matrix(x, ncol=10, nrow=1)
x <- as.data.frame(x)
names(x) <- c('x1', 'x2', 'x3', 'x4', 'x5', 'x6', 'x7', 'x8', 'x9', 'x10')
out <- predict(rfTrt, x)
return(out)
}
### Model outcome predict control
outcomeCtrl <- function(x){
x <- matrix(x, ncol=10, nrow=1)
x <- as.data.frame(x)
names(x) <- c('x1', 'x2', 'x3', 'x4', 'x5', 'x6', 'x7', 'x8', 'x9', 'x10')
out <- predict(rfCtrl, x)
return(out)
}
for (i in 1:length(dframes)) {
newX <- normalz(df=dframes[[i]])
sp1 <- trainTest(newX)
dftrain <- sp1[[1]]
dftest <- sp1[[2]]
assign(paste("newX", i, sep=""), newX)
assign(paste("dftrain", i, sep=""), dftrain)
assign(paste("dftest", i, sep=""), dftrain)
}
dftrainCat <- dftrain3
dftestCat <- dftest3
dftrainCat2 <- dftrain4
dftestCat2 <- dftest4
library(zeallot)
c(X_train, y_train, trt_train, X_test, y_test, trt_test, psm1, rfTrt, rfTrtPred, rfCtrl, rfCtrlPred) %<-% mods(dftrain1, dftest1, prognostic=FALSE)
c(X_train2, y_train2, trt_train2, X_test2, y_test2, trt_test2, psm2, rfTrt2, rfTrtPred2, rfCtrl2, rfCtrlPred2, dftrain2, dftest2) %<-% mods(dftrain2, dftest2, prognostic=TRUE)
c(X_trainCat, y_trainCat, trt_trainCat, X_testCat, y_testCat, trt_testCat, psmCat, rfTrtCat, rfTrtPredCat, rfCtrlCat, rfCtrlPredCat) %<-% mods(dftrainCat, dftestCat, prognostic=FALSE)
c(X_trainCat2, y_trainCat2, trt_trainCat2, X_testCat2, y_testCat2, trt_testCat2, psmCat2, rfTrtCat2, rfTrtPredCat2, rfCtrlCat2, rfCtrlPredCat2, dftrainCat2, dftestCat2) %<-% mods(dftrainCat, dftestCat, prognostic=TRUE)
##
# arguments
predCtrl <- function(x){
predict(rfCtrl, x)
}
predTrt <- function(x){
predict(rfTrt, x)
}
# for logistic PS only!
predPsm <- function(x){
x <- as.data.frame(x)
names(x) <- c('x1', 'x2', 'x3', 'x4', 'x5', 'x6', 'x7', 'x8', 'x9', 'x10')
ps <- predict(psm1, x, type="response")
ps1 <- round(ps)
return(ps1)
}
predPS <- function(x){
x <- as.data.frame(x)
names(x) <- c('x1', 'x2', 'x3', 'x4', 'x5', 'x6', 'x7', 'x8', 'x9', 'x10')
ps <- predict(psm1, x, type="response")
return(ps)
}
# For prognostic propensity scores
predPS2 <- function(x){
x <- as.data.frame(x)
names(x) <- c('x1', 'x2', 'x3', 'x4', 'x5', 'x6', 'x7', 'x8', 'x9', 'x10', 'pg')
ps <- predict(psm2, x, type="response")
return(ps)
}
index <- sample(nrow(dftest1), 1)
obs <- dftest1[index,]
propensityIndex=c(0:6)
propensityIndex2=c(0:6, 10)
outcomeIndex=c(0:3, 7:9)
observation=matrix(obs)
X=X_test
y=y_test
treat=trt_test
propensityIndex=matrix(propensityIndex, nrow=1, ncol=length(propensityIndex))
propensityIndex2=matrix(propensityIndex2, nrow=1, ncol=length(propensityIndex2))
propensityIndex
outcomeIndex=matrix(outcomeIndex, nrow=1, ncol=length(outcomeIndex))
outcomeIndex
outcomeTrt=predTrt
outcomeCtrl=predCtrl
idx=as.integer(index)
score_function=predPS
numCores <- detectCores()
indices <- sample(seq(nrow(dftest1)), 25)
indices[1]
dftest1[indices[1]+1,]
predPS(as.matrix(dftest1[indices[1]+1,2:11], ncol=10, nrow=1))
adv <- list()
advEnn <- list()
og <- list()
sysTime <- list()
# system.time({
# for (i in 1:25) {
#   sysTime[[i]] <- system.time({
#     adv[[i]] <- py$gsAll(indices[i])
#   })
#   og[[i]] <- dftest1[indices[i]+1, ]
#   print(i)
#   print(sysTime[[i]])
# }})
library(pbmcapply)
system.time(
results <- pbmclapply(c(indices[1:25]), py$gsAll, mc.cores = 8)
)
og = list()
for (i in 1:length(indices)){
og[[i]] <- dftest1[indices[i]+1, ]
}
pbFnc <- function(gsAll, dftest1) {
library(pbmcapply)
results <- pbmclapply(c(indices[1:25]), gsAll, mc.cores = 8)
return(results)
}
ogFnc <- function(dftest, indices) {
og = list()
for (i in 1:length(indices)){
og[[i]] <- dftest[indices[i]+1, ]
}
return(og)
}
resultsList <- list()
ogList <- list()
resultsList[[1]] <- results1 <- pbFnc(py$gsAll, dftest1)
og1 <- ogList[[1]] <- ogFnc(dftest1, indices)
resultsList[[2]] <- results2 <- pbFnc(py$gsAll2, dftest2)
og2 <- ogList[[2]] <- ogFnc(dftest2, indices)
resultsList[[3]] <- resultsCat <- pbFnc(py$gsAll3, dftestCat)
py$gsAll3(dftestCat[indices[1]])
py$gsAll3(dftestCat[indices[1],])
py$gsAll3(indices[1])
